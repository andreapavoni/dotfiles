" Vim configuration
" Credits:
"   Gary Bernhardt  <destroyallsoftware.com>
"   Drew Neil  <vimcasts.org>
"   Tim Pope  <tbaggery.com>
"   Janus  <github.com/carlhuda/janus>
"   Mislav <mislav.uniqpath.com/2011/12/vim-revisited>
"   Stefano Verna  <github.com/stefanoverna/dotfiles>
"   Luca Guidi  <github.com/jodosha/dotfiles>

set nocompatible     " Vim behavior, not Vi.

" Vundle
source ~/.dotfiles/vim/vundlerc

filetype plugin indent on
syntax enable        " Enable syntax highlight

set encoding=utf-8   " Use UTF-8 encoding
set clipboard=unnamed
set backupdir=~/.dotfiles/vim/_backup    " where to put backup files.
set directory=~/.dotfiles/vim/_temp      " where to put swap files.
set backupskip=/tmp/*,/private/tmp/*
set nobackup                      " Don't make a backup before overwriting a file.
set nowritebackup
set noswapfile       " Don't use swap files (.swp)
set autoread         " Autoreload buffers
let mapleader=","

" History, Cursor, Rulers
" set history=50                  " Just remember last 50 commands
set laststatus=2                  " Always display the status line
set ruler                         " Show the cursor position all the time
set number                        " Show line numbers
set showcmd                       " Display incomplete commands
set cursorline                    " Highlight current cursor line
set mouse=a                       " enable mouse support
set visualbell                    " No beeping.

" Status bar
set showmode                      " Display the mode you're in.
set hidden                        " Handle multiple buffers better.
set wildmenu                      " Enhanced command line completion.

" Tabs and white spaces
set wrap                        " Don't wrap lines
set tabstop=2                     " Tabs are always 2 spaces
set softtabstop=2
set expandtab                     " Expand tabs into spaces
set shiftwidth=2                  " Reindent with 2 spaces (using <<)
set list                          " Show invisible chars
set listchars=""                  " Reset listchars
set list listchars=tab:»·,trail:· " Set listchars for tabs and trailing spaces
set scrolloff=3                   " provide some context when editing
set backspace=indent,eol,start    " allow backspacing over everything in insert mode
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.scssc,*.sassc " Ignore caches and binaries

" Apparence
set t_Co=256
set background=dark
let base16colorspace=256        " Access colors present in 256 colorspace
colorscheme base16-mocha

" Search
set hlsearch    " Highlight matches
set incsearch   " Incremental searching
set ignorecase  " Searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter
highlight Search ctermfg=black ctermbg=yellow guifg=#7e705a guibg=#f4bc87
highlight ColorColumn guibg=#2d2d2d ctermbg=18 ctermfg=246

" neovim
if has('nvim')
  tnoremap <Esc> <C-\><C-n>
endif

" vim/macvim
if !has('nvim')
  set term=screen-256color
  set antialias
endif

" Highlight the 80th column (works in Vim >= 7.3)
if exists('+colorcolumn')
  set colorcolumn=80
endif

" Bubble single lines
nmap <C-Up> ddkP
nmap <C-Down> ddp
" Bubble multiple lines
vmap <C-Up> xkP`[V`]
vmap <C-Down> xp`[V`]

" Use modeline overrides
set modeline
set modelines=10

" Hide highlited search
nmap <silent> <C-N> :silent noh<CR>

" Re-indent entire buffer
map   <silent> <F5> mmgg=G'm
imap  <silent> <F5> <Esc> mmgg=G'm
vmap  <tab> =
nmap  <tab> ==

" Disable arrow keys, use hjkl
noremap  <Up> ""
noremap  <Down> ""
noremap  <Left> ""
noremap  <Right> ""

" Navigate buffers
noremap <S-left> :bprev<CR>·
noremap <S-right> :bnext<CR>

" When using tmux/screen, $TERM should be set to screen-256color. this is a
" fix to use arrow keys correctly
if &term =~ '^screen'
  set mouse+=a
  " tmux and neovim know the extended mouse mode
  if !has('nvim')
    set ttymouse=xterm2
  endif

  " tmux will send xterm-style keys when its xterm-keys option is on
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif

" Navigate split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l
if has('nvim')
  nnoremap <BS> <c-w>h
endif
if !has('nvim')
  nnoremap <c-h> <c-w>h
endif

" Disable K command (:help K)
nmap K <Nop>

" Search visually selected text
vnorem // y/<c-r>"<cr>

" Find merge conflict markers
nmap <silent> <leader>cf <ESC>/\v^[<=>]{7}( .*\|$)<CR>

function! s:clearWhitespaces()
  ma a
  :%s/\s\+$//e
  'a
endfunction

" Filetypes

" Treat vundlerc as a vim file
au BufRead,BufNewFile vundlerc set ft=vim

" In Makefiles, use real tabs, not tabs expanded to spaces
au FileType make set noexpandtab

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru} set ft=ruby
" Convert old 1.8 Hash syntax to the new one
au FileType ruby command! UpdateHashSyntax :%s/:\(\w\+\)\(\s*=>\s*\)/\1: /gc

" Make sure all markdown files have the correct filetype set and setup wrapping
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn,txt} set ft=markdown

" Treat html.erb.deface files like ERB
au BufNewFile,BufRead *.html.erb.deface set ft=eruby

" Treat JavaScript derived files the same way
au BufNewFile,BufRead *.{json,es6} set ft=javascript

" make Python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python set softtabstop=4 tabstop=4 shiftwidth=4 textwidth=79

" Remember last location in file, but not for commit messages.
" see :help last-position-jump
au BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$")
  \| exe "normal! g`\"" | endif

" automatically clear whitespaces owhen saving buffer
au BufWritePre * :call s:clearWhitespaces()

set ff=unix
au BufRead,BufNewFile *.* :set ff=unix

" NERDTree
let NERDTreeIgnore=['\.rbc$', '\~$']
let NERDTreeHijackNetrw =1
let g:NERDTreeChDirMode = 2
let g:NERDTreeWinPos = "right"

"close NERDTree if open and delete current buffer
function! BufferCloser()
  NERDTreeClose
  :bdelete
endfunction
noremap <C-D> :call BufferCloser()<CR>

map \\ :NERDTreeToggle<CR>

" NERD_commenter
nmap <leader><space> <plug>NERDCommenterComment
nmap <leader>cc <plug>NERDCommenterToggle

" CTags
map <Leader>rt :!ctags --extra=+f -R *<CR><CR>
map <Leader>brt :!bundle list --paths=true \| xargs ctags --extra=+f --exclude=.git --exclude=log -R *<CR><CR>

" CtrlP
map <Leader><leader> :CtrlP<CR>
map <Leader>l :CtrlPBuffer<CR>
let g:ctrlp_working_path_mode = 'rw'
let g:ctrlp_map = '<Leader>p'
let g:ctrlp_cmd = 'CtrlPMixed'


" Dispatch
autocmd FileType ruby let b:dispatch = 'ruby %'

" Fix Quicfix to not open under NEERDTree on the right
autocmd FileType qf wincmd J

" Toggle Quickfix
nnoremap <C-X> :call QuickfixToggle()<CR>
let g:quickfix_is_open = 0

function! QuickfixToggle()
  if g:quickfix_is_open
    cclose
    let g:quickfix_is_open = 0
    execute g:quickfix_return_to_window . "wincmd w"
  else
    let g:quickfix_return_to_window = winnr()
    copen
    let g:quickfix_is_open = 1
  endif
endfunction

" vim-rspec
let g:rspec_command = "Dispatch bundle exec rspec {spec}"
let g:rspec_runner = "os_x_iterm"
map <C-E> :call RunCurrentSpecFile()<CR>
map <C-\> :call RunNearestSpec()<CR>

" Surround
nmap <leader>s ysiw

" select last paste in visual mode
nnoremap <expr> gb '`[' . strpart(getregtype(), 0, 1) . '`]'

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor\ --path-to-agignore\ $HOME/.agignore

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -f -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0

  " bind K to grep word under cursor
  nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>
else
  "ctrl+p ignore files in .gitignore
  let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
endif

" Airline
" Always show the status bar
set laststatus=2
let g:airline_powerline_fonts=1
let g:airline#extensions#syntastic#enabled = 0
let g:airline#extensions#bufferline#enabled = 0
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#fnamemod = ':t'

let g:airline_symbols = {}
let g:airline_symbols.branch = '⎇  '
let g:airline_symbols.linenr = '␤ '
let g:airline_symbols.paste = 'ρ'
" let g:airline_theme='lucius'
let g:airline_theme='base16'

" Tmuxline
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'win'  : ['#I', '#W'],
      \'cwin' : ['#I', '#W'],
      \'x'    : [' ', '#(date +"%d %b %Y %H:%M")'],
      \'z'    : '#H'}
" let g:tmuxline_theme = {
"     \   'a'    : [ 236, 103 ],
"     \   'b'    : [ 253, 239 ],
"     \   'c'    : [ 244, 236 ],
"     \   'x'    : [ 244, 236 ],
"     \   'y'    : [ 253, 239 ],
"     \   'z'    : [ 236, 103 ],
"     \   'win'  : [ 103, 236 ],
"     \   'cwin' : [ 236, 103 ],
"     \   'bg'   : [ 244, 236 ],
"     \ }
" values represent: [ FG, BG, ATTR ]
"   FG ang BG are color codes
"   ATTR (optional) is a comme-delimited string of one or more of bold, dim, underscore, etc.
"   For details refer to 'message-attr attributes' in tmux man page

" vim-go
let g:go_fmt_autosave = 0

" vim-multiple-cursors
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" Sessions (vim-obsession)
function! AutoloadSession()
  let g:this_obsession = getcwd() . '/.Session.vim'
  if argc() == 0
    if !empty(glob("./.Session.vim"))
      execute 'so ./.Session.vim'
    endif
  endif
endfunction
autocmd VimEnter * nested call AutoloadSession()

if has("gui_running")
  set guifont=Menlo\ bold:h14  " Font is Menlo
  source ~/.mvimrc
endif
